#pragma once

#include "./DataModelClass.h"

#define DATA_MODEL_CLASS_LUA_CLASS "DataModelClass"
#define DATA_MODEL_CLASS_FACTORY_LUA_CLASS "DataModelClass.Factory.Class"
#define DATA_MODEL_CLASS_FACTORY_LUA_OBJ "DataModelClass.Factory"

/*依托lua本身与C/C++交互的机制，在lua中可以调用的C/C++方法，其原型须为static int function(lua_State)*/
/*按照这个原型实现你的业务逻辑中需要的方法时,从luastate的栈里面取出来参数,然后把要返回的结果压回到栈里面去.
*/

class LuaDataModelClass
{
public:
	static int DeleteSelf(lua_State *luaState);
	static int GetItemAtRowForView(lua_State *luaState);
	static int GetRowCountForView(lua_State *luaState);
	static int GetColumnCountForView(lua_State *luaState);
	static void RegisterClass(XL_LRT_ENV_HANDLE hEnv);
private:
	static DataModelClass *GetDataModelClass(lua_State *luaState);
};

//创建LogClass 实例的类厂单件
class LuaDataModelClassFactory
{
public:
	static LuaDataModelClassFactory * __stdcall Instance(void*);
	static int CreateInstance(lua_State *luaState);
	static void RegisterObj(XL_LRT_ENV_HANDLE hEnv);
};

class MyLuaDataModelClassFactory : public LuaDataModelClassFactory
{
public:
	static DataModelClass *CreateInstance();
};