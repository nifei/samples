#include "stdafx.h"
#include "LuaDataModelClass.h"

DataModelClass *LuaDataModelClass::GetDataModelClass(lua_State *luaState)
{
	//仅仅是重新解释了给出的对象的比特模型而没有进行二进制转换。
	DataModelClass **ppDataModelClass = reinterpret_cast<DataModelClass**>(luaL_checkudata(luaState, 1, DATA_MODEL_CLASS_LUA_CLASS));
	if(ppDataModelClass && (*ppDataModelClass))
		return *ppDataModelClass;
	return 0;
}
int LuaDataModelClass::GetItemAtRowForView(lua_State *luaState)
{
	if (DataModelClass *pDataModelClass = GetDataModelClass(luaState))
	{
		int row = static_cast<int> (lua_tointeger(luaState, 2));
		const char* view = static_cast<const char*> (lua_tostring(luaState, 3));
		void *userData = pDataModelClass->GetItemAtRowForView(row, view);
		lua_pushlightuserdata(luaState, userData);
		return 1;
	}

	lua_pushnil(luaState);
	return 1;
}

int LuaDataModelClass::GetRowCountForView(lua_State *luaState)
{
	if (DataModelClass *pDataModelClass = GetDataModelClass(luaState))
	{
		const char *view = static_cast<const char*>(lua_tostring(luaState, 2));
		int rowCount = pDataModelClass->GetRowCountForView(view);
		lua_pushinteger(luaState, rowCount);
		return 1;
	}
	lua_pushnil(luaState);
	return 1;
}

int LuaDataModelClass::GetColumnCountForView(lua_State *luaState)
{
	if (DataModelClass *pDataModelClass = GetDataModelClass(luaState))
	{
		const char *view = static_cast<const char*>(lua_tostring(luaState, 2));
		int columnCount = pDataModelClass->GetColumnCountForView(view);
		lua_pushinteger(luaState, columnCount);
		return 1;
	}
	lua_pushnil(luaState);
	return 1;
}


int LuaDataModelClass::DeleteSelf(lua_State *luaState)
{
	if(DataModelClass *pDataModelClass = GetDataModelClass(luaState))
	{
		delete pDataModelClass;
	}
	return 0;
}


static XLLRTGlobalAPI LuaDataModelClassMemberFunctions[] = 
{
	{"GetItemAtRowForView",LuaDataModelClass::GetItemAtRowForView},
	{"GetRowCountForView",LuaDataModelClass::GetRowCountForView},
	{"GetColumnCountForView",LuaDataModelClass::GetColumnCountForView},
    {"__gc",LuaDataModelClass::DeleteSelf},
    {NULL,NULL}
};

void LuaDataModelClass::RegisterClass(XL_LRT_ENV_HANDLE hEnv)
{
    if(hEnv == NULL)
    {
        return;
    }

    long nLuaResult = XLLRT_RegisterClass(hEnv,DATA_MODEL_CLASS_LUA_CLASS,LuaDataModelClassMemberFunctions,NULL,0);
}
//------------------------------------------------------------------

int LuaDataModelClassFactory::CreateInstance(lua_State* luaState)
{
    DataModelClass* pResult = new DataModelClass();
    XLLRT_PushXLObject(luaState,DATA_MODEL_CLASS_LUA_CLASS,pResult);
    return 1;
}

LuaDataModelClassFactory* __stdcall LuaDataModelClassFactory::Instance(void*)
{
    static LuaDataModelClassFactory* s_pTheOne = NULL;
    if(s_pTheOne == NULL)
    {
        s_pTheOne = new LuaDataModelClassFactory();
    }
    return s_pTheOne;
}

static XLLRTGlobalAPI LuaDataModelClassFactoryMemberFunctions[] = 
{
   {"CreateInstance",LuaDataModelClassFactory::CreateInstance},
    {NULL,NULL}
};

void LuaDataModelClassFactory::RegisterObj(XL_LRT_ENV_HANDLE hEnv)
{
    if(hEnv == NULL)
	{
        return ;
	}

    XLLRTObject theObject;
    theObject.ClassName = DATA_MODEL_CLASS_FACTORY_LUA_CLASS;
    theObject.MemberFunctions = LuaDataModelClassFactoryMemberFunctions;
    theObject.ObjName = DATA_MODEL_CLASS_FACTORY_LUA_OBJ;
    theObject.userData = NULL;
    theObject.pfnGetObject = (fnGetObject)LuaDataModelClassFactory::Instance;

    XLLRT_RegisterGlobalObj(hEnv,theObject); 
}